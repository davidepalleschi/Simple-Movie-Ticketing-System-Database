-- MySQL Script generated by MySQL Workbench
-- Wed Sep  9 22:36:53 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema cinema
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema cinema
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cinema` DEFAULT CHARACTER SET utf8 ;
USE `cinema` ;

-- -----------------------------------------------------
-- Table `cinema`.`cinema`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`cinema` (
  `Nome` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`Nome`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`film`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`film` (
  `Titolo` VARCHAR(64) NOT NULL,
  `Durata` TIME NOT NULL,
  `Cast` VARCHAR(64) NULL DEFAULT NULL,
  `CasaCinematografica` VARCHAR(64) NULL DEFAULT NULL,
  PRIMARY KEY (`Titolo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`maschera`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`maschera` (
  `CodiceMaschera` INT(11) NOT NULL AUTO_INCREMENT,
  `Nome` VARCHAR(64) NULL DEFAULT NULL,
  `cinema_Nome` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`CodiceMaschera`),
  INDEX `fk_maschera_cinema1_idx` (`cinema_Nome` ASC),
  CONSTRAINT `fk_maschera_cinema1`
    FOREIGN KEY (`cinema_Nome`)
    REFERENCES `cinema`.`cinema` (`Nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`sala`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`sala` (
  `NumeroSala` INT(11) NOT NULL,
  `Cinema_Nome` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`NumeroSala`, `Cinema_Nome`),
  INDEX `fk_sala_cinema1_idx` (`Cinema_Nome` ASC),
  CONSTRAINT `fk_sala_cinema1`
    FOREIGN KEY (`Cinema_Nome`)
    REFERENCES `cinema`.`cinema` (`Nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`posto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`posto` (
  `Fila` VARCHAR(1) NOT NULL,
  `Numero` INT(11) NOT NULL,
  `Sala_NumeroSala` INT(11) NOT NULL,
  `Sala_Cinema_Nome` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`Fila`, `Numero`, `Sala_NumeroSala`, `Sala_Cinema_Nome`),
  INDEX `fk_Posto_Sala1_idx` (`Sala_NumeroSala` ASC, `Sala_Cinema_Nome` ASC),
  CONSTRAINT `fk_Posto_Sala1`
    FOREIGN KEY (`Sala_NumeroSala`)
    REFERENCES `cinema`.`sala` (`NumeroSala`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`cartacredito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`cartacredito` (
  `Codice` INT NOT NULL AUTO_INCREMENT,
  `Numero` VARCHAR(64) NOT NULL,
  `Intestatario` VARCHAR(64) NOT NULL,
  `Datascadenza` DATE NOT NULL,
  `CVV` INT NOT NULL,
  PRIMARY KEY (`Codice`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cinema`.`proiezione`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`proiezione` (
  `Codice` INT(11) NOT NULL AUTO_INCREMENT,
  `Orario` DATETIME NOT NULL,
  `Costo` INT(11) NOT NULL,
  `Sala_NumeroSala` INT(11) NOT NULL,
  `Sala_Cinema_Nome` VARCHAR(64) NOT NULL,
  `Film_Titolo` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`Codice`),
  INDEX `fk_Proiezione_Sala1_idx` (`Sala_NumeroSala` ASC, `Sala_Cinema_Nome` ASC),
  INDEX `fk_Proiezione_Film1_idx` (`Film_Titolo` ASC),
  CONSTRAINT `fk_Proiezione_Film1`
    FOREIGN KEY (`Film_Titolo`)
    REFERENCES `cinema`.`film` (`Titolo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Proiezione_Sala1`
    FOREIGN KEY (`Sala_NumeroSala`)
    REFERENCES `cinema`.`sala` (`NumeroSala`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 18
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`prenotazione`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`prenotazione` (
  `CodicePrenotazione` INT(11) NOT NULL AUTO_INCREMENT,
  `Cancellato` TINYINT(4) NULL DEFAULT '0',
  `Utilizzato` TINYINT(4) NULL DEFAULT '0',
  `Posto_Fila` VARCHAR(1) NULL,
  `Posto_Numero` INT(11) NULL,
  `Posto_Sala_NumeroSala` INT(11) NULL,
  `Posto_Sala_Cinema_Nome` VARCHAR(64) NULL,
  `Proiezione_Codice` INT(11) NULL,
  `OrarioInizio` VARCHAR(45) NOT NULL,
  `OrarioFine` VARCHAR(45) NULL,
  `cartacredito_Codice` INT NULL DEFAULT NULL,
  PRIMARY KEY (`CodicePrenotazione`),
  INDEX `fk_Prenotazione_Posto1_idx` (`Posto_Fila` ASC, `Posto_Numero` ASC, `Posto_Sala_NumeroSala` ASC, `Posto_Sala_Cinema_Nome` ASC),
  INDEX `fk_Prenotazione_Proiezione1_idx` (`Proiezione_Codice` ASC),
  INDEX `fk_Prenotazione_CartaDiCredito1_idx` (`cartacredito_Codice` ASC),
  CONSTRAINT `fk_Prenotazione_CartaDiCredito1`
    FOREIGN KEY (`cartacredito_Codice`)
    REFERENCES `cinema`.`cartacredito` (`Codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Prenotazione_Posto1`
    FOREIGN KEY (`Posto_Fila` , `Posto_Numero`)
    REFERENCES `cinema`.`posto` (`Fila` , `Numero`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Prenotazione_Proiezione1`
    FOREIGN KEY (`Proiezione_Codice`)
    REFERENCES `cinema`.`proiezione` (`Codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 26
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`proiezionista`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`proiezionista` (
  `CodiceProiezionista` INT(11) NOT NULL AUTO_INCREMENT,
  `Nome` VARCHAR(64) NULL DEFAULT NULL,
  `cinema_Nome` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`CodiceProiezionista`),
  INDEX `fk_proiezionista_cinema1_idx` (`cinema_Nome` ASC),
  CONSTRAINT `fk_proiezionista_cinema1`
    FOREIGN KEY (`cinema_Nome`)
    REFERENCES `cinema`.`cinema` (`Nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`calendario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`calendario` (
  `OrarioInizio` DATETIME NOT NULL,
  `OrarioFine` DATETIME NOT NULL,
  PRIMARY KEY (`OrarioFine`, `OrarioInizio`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`turmaschera`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`turmaschera` (
  `Maschera_CodiceMaschera` INT(11) NOT NULL,
  `calendario_OrarioInizio` DATETIME NOT NULL,
  `calendario_OrarioFine` DATETIME NOT NULL,
  PRIMARY KEY (`Maschera_CodiceMaschera`, `calendario_OrarioInizio`, `calendario_OrarioFine`),
  INDEX `fk_TurMaschera_Maschera1_idx` (`Maschera_CodiceMaschera` ASC),
  INDEX `fk_turmaschera_turno1_idx` (`calendario_OrarioFine` ASC, `calendario_OrarioInizio` ASC),
  CONSTRAINT `fk_TurMaschera_Maschera1`
    FOREIGN KEY (`Maschera_CodiceMaschera`)
    REFERENCES `cinema`.`maschera` (`CodiceMaschera`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_turmaschera_turno1`
    FOREIGN KEY (`calendario_OrarioFine` , `calendario_OrarioInizio`)
    REFERENCES `cinema`.`calendario` (`OrarioFine` , `OrarioInizio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`turproiezionista`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`turproiezionista` (
  `Proiezionista_CodiceProiezionista` INT(11) NOT NULL,
  `calendario_OrarioInizio` DATETIME NOT NULL,
  `calendario_OrarioFine` DATETIME NOT NULL,
  PRIMARY KEY (`Proiezionista_CodiceProiezionista`, `calendario_OrarioInizio`, `calendario_OrarioFine`),
  INDEX `fk_TurProiezionista_Proiezionista1_idx` (`Proiezionista_CodiceProiezionista` ASC),
  INDEX `fk_turproiezionista_turno1_idx` (`calendario_OrarioFine` ASC, `calendario_OrarioInizio` ASC),
  CONSTRAINT `fk_TurProiezionista_Proiezionista1`
    FOREIGN KEY (`Proiezionista_CodiceProiezionista`)
    REFERENCES `cinema`.`proiezionista` (`CodiceProiezionista`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_turproiezionista_turno1`
    FOREIGN KEY (`calendario_OrarioFine` , `calendario_OrarioInizio`)
    REFERENCES `cinema`.`calendario` (`OrarioFine` , `OrarioInizio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `cinema`.`apertura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cinema`.`apertura` (
  `cinema_Nome` VARCHAR(64) NOT NULL,
  `calendario_OrarioInizio` DATETIME NOT NULL,
  `calendario_OrarioFine` DATETIME NOT NULL,
  PRIMARY KEY (`cinema_Nome`, `calendario_OrarioInizio`, `calendario_OrarioFine`),
  INDEX `fk_Apertura_cinema1_idx` (`cinema_Nome` ASC),
  CONSTRAINT `fk_Apertura_calendario1`
    FOREIGN KEY (`calendario_OrarioFine` , `calendario_OrarioInizio`)
    REFERENCES `cinema`.`calendario` (`OrarioFine` , `OrarioInizio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Apertura_cinema1`
    FOREIGN KEY (`cinema_Nome`)
    REFERENCES `cinema`.`cinema` (`Nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `cinema` ;

-- -----------------------------------------------------
-- procedure AggiungiApertura
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AggiungiApertura`(cinemanome varchar(64),orarioinizio datetime,orariofine datetime)
BEGIN
INSERT INTO apertura (cinema_Nome, calendario_OrarioInizio, calendario_OrarioFine) VALUES (cinemanome,orarioinizio,orariofine);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AggiungiFilm
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AggiungiFilm`(titolo varchar(64),durata time,cast varchar(64),casacinema varchar(64))
BEGIN
	insert into Film(Titolo,Durata,Cast,CasaCinematografica) values (titolo,durata,cast,casacinema);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AggiungiGiornoCalendario
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AggiungiGiornoCalendario`(orarioinizio datetime,orariofine datetime)
BEGIN
IF(timestampdiff(hour ,orarioinizio, orariofine)<=8) THEN
INSERT INTO `cinema`.`calendario` (`OrarioInizio`, `OrarioFine`) VALUES (orarioinizio,orariofine);
ELSE signal sqlstate '45000' SET MESSAGE_TEXT = 'Turno troppo lungo, massimo 8 ore';
END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AggiungiMaschera
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AggiungiMaschera`(nome varchar(64),cinemanome varchar(64))
BEGIN
INSERT INTO `cinema`.`maschera` (`Nome`, `cinema_Nome`) VALUES (nome, cinemanome);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AggiungiProiezione
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AggiungiProiezione`(orario datetime,costo int,numerosala int,cinemanome varchar(64),filmtitolo varchar(64) )
BEGIN
	insert into proiezione(Orario,Costo,Sala_NumeroSala,Sala_Cinema_Nome,Film_Titolo) 
    values (orario,costo,numerosala,cinemanome,filmtitolo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AggiungiProiezionista
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AggiungiProiezionista`(nome varchar(64),nomecinema varchar(64))
BEGIN
INSERT INTO `cinema`.`proiezionista` (`Nome`, `Cinema_Nome`) VALUES (nome, nomecinema);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AssegnaTurnoMaschera
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AssegnaTurnoMaschera`(codicemaschera int, orarioinizio datetime,orariofine datetime)
BEGIN
INSERT INTO `cinema`.`turmaschera` (`Maschera_CodiceMaschera`, `calendario_OrarioInizio`, `calendario_OrarioFine`) VALUES (codicemaschera, orarioinizio,orariofine);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AssegnaTurnoProiezionista
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AssegnaTurnoProiezionista`(codiceproiezionista int, orarioinizio datetime,orariofine datetime)
BEGIN
INSERT INTO `cinema`.`turproiezionista` (`Proiezionista_CodiceProiezionista`, `calendario_OrarioInizio`, `caelndario_OrarioFine`) VALUES (codiceproiezionista, orarioinizio, orariofine);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaApertura
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaApertura`(cinemanome varchar(64),orarioinizio datetime,orariofine datetime)
BEGIN
DELETE FROM apertura WHERE (cinema_Nome = cinemanome) and (calendario_OrarioInizio = orarioinizio) and (`calendario_OrarioFine` = orariofine);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaFilm
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaFilm`(titolo varchar(64))
BEGIN
	DELETE FROM film WHERE (Titolo = titolo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaGiornoCalendario
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaGiornoCalendario`(orarioinizio datetime,orariofine datetime)
BEGIN
DELETE FROM calendario WHERE (OrarioFine = orariofine) and (OrarioInizio = orarioinizio);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaMaschera
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaMaschera`(codice int)
BEGIN
DELETE FROM maschera WHERE (CodiceMaschera = codice);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaPrenotazione
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaPrenotazione`(codiceprenotazione int)
BEGIN
declare orarioFine DATETIME;
SET orarioFine = (SELECT prenotazione.OrarioFine from prenotazione WHERE prenotazione.CodicePrenotazione = codicePrenotazione);
IF (orarioFine is NULL) THEN 
	signal sqlstate '45000'
    SET MESSAGE_TEXT = 'Prenotazione non valida';
end if;
if (select CodicePrenotazione from prenotazione where prenotazione.CodicePrenotazione=codiceprenotazione) is NULL then 
signal sqlstate '45000' 
SET message_text='Prenotazione Inesistente';
end if;
if now()>(select Orario from proiezione,prenotazione where prenotazione.Proiezione_Codice=proiezione.Codice and prenotazione.CodicePrenotazione=codiceprenotazione) - interval 30 minute then 
signal sqlstate '45000' 
SET message_text='Non è possibile cancellare la prenotazione';
else 
update prenotazione set Cancellato=1 where prenotazione.CodicePrenotazione=codicePrenotazione;
END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaProiezione
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaProiezione`(codice int)
BEGIN
DELETE FROM proiezione WHERE (Codice = codice);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaProiezionista
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaProiezionista`(codice int)
BEGIN
DELETE FROM proiezionista WHERE (CodiceProiezionista = codice);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaTurnoMaschera
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaTurnoMaschera`(codicemaschera int,orarioinizio datetime,orariofine datetime)
BEGIN
DELETE FROM turmaschera WHERE (Maschera_CodiceMaschera = codicemaschera) and (calendario_OrarioInizio = orarioinizio) and (calendario_OrarioFine = orariofine);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CancellaTurnoProiezionista
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CancellaTurnoProiezionista`(codiceproiezionista int,orarioinizio datetime,orariofine datetime)
BEGIN
DELETE FROM turproiezionista WHERE (Proiezionista_CodiceProiezionista = codiceproiezionista) and (calendario_OrarioInizio = orarioinizio) and (calendario_OrarioFine = orariofine);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ConfermaPrenotazione
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ConfermaPrenotazione`(codicePrenotazione int,numerocarta varchar(64),intestatario varchar(64),datascadenza date,cvv int)
BEGIN
	declare orarioInizio DATETIME;
    declare orarioFine DATETIME;
    SET orarioInizio = (SELECT prenotazione.OrarioInizio from prenotazione WHERE prenotazione.CodicePrenotazione = codicePrenotazione);
    SET orarioFine = (SELECT prenotazione.OrarioFine from prenotazione WHERE prenotazione.CodicePrenotazione = codicePrenotazione);
    

IF (orarioFine is not NULL) THEN 
	signal sqlstate '45000'
    SET MESSAGE_TEXT = 'Prenotazione già confermata';
ELSEIF (orarioInizio is NULL or timestampdiff(MINUTE, orarioInizio, now())>10) THEN
	signal sqlstate '45000'
    SET MESSAGE_TEXT = 'Passati più di 10 minuti!';
ELSE
	start transaction;
	insert ignore into cartacredito(Numero,Intestatario,Datascadenza,CVV) values (numerocarta,intestatario,datascadenza,cvv);
	update prenotazione set OrarioFine=now(),cartacredito_Codice=(select Codice from cartacredito where Numero=numerocarta and Intestatario=intestatario and Datascadenza=datascadenza and CVV=cvv) where prenotazione.CodicePrenotazione=codicePrenotazione;
    commit;
END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GeneraReportDipendenti
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GeneraReportDipendenti`(nomecinema varchar(64),datainizio date,datafine date)
BEGIN
declare curr date;
SET curr=datainizio;
DROP TABLE IF EXISTS Result;
CREATE TEMPORARY TABLE Result(
    Giorno date,
    AperturaCinema varchar(64),
    Maschere int,
    Proiezionisti int,
    SaleUtilizzate int,
    Problemi varchar(2) AS (IF((Maschere>=2 and Proiezionisti>=SaleUtilizzate) or AperturaCinema='Chiuso','no','si'))
);
WHILE curr <= datafine DO
BEGIN
insert into Result(Giorno,AperturaCinema,Maschere,Proiezionisti,SaleUtilizzate)
SELECT curr,
(SELECT IF(count(cinema_Nome)=0,'Chiuso','Aperto') from apertura as a where a.cinema_Nome = nomecinema and a.calendario_OrarioInizio >= curr and a.calendario_OrarioFine< DATE_ADD(curr,interval 1 day)),
(SELECT count(m.CodiceMaschera) from turmaschera as tm, maschera as m where tm.Maschera_CodiceMAschera=m.CodiceMaschera and m.cinema_Nome = nomecinema and tm.calendario_OrarioInizio >= curr and tm.calendario_OrarioFine< DATE_ADD(curr,interval 1 day)),
(SELECT count(p.CodiceProiezionista) from turproiezionista as tp, proiezionista as p where tp.Proiezionista_CodiceProiezionista=p.CodiceProiezionista and p.cinema_Nome = nomecinema and tp.calendario_OrarioInizio >= curr and tp.calendario_OrarioFine< DATE_ADD(curr,interval 1 day)),
(SELECT count(distinct p.Sala_NumeroSala) from proiezione as p where p.Sala_Cinema_Nome = nomecinema and p.Orario >= curr and p.orario <  DATE_ADD(curr,interval 1 day));

SET curr=DATE_ADD(curr,interval 1 day);
END;
END WHILE;
SELECT 
    *
FROM
    Result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GeneraReportPrenotazioni
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GeneraReportPrenotazioni`(datainizio date, datafine date )
BEGIN

DECLARE finished INTEGER DEFAULT 0;
DECLARE numerosala int;
DECLARE nomecinema varchar(64);

DEClARE curSala
	CURSOR FOR 
		SELECT * FROM sala;

	DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;
        
DROP TABLE IF EXISTS Result;
CREATE TEMPORARY TABLE Result(
	Cinema varchar(64),
    Sala int,
    PrenotazioniUtilizzate int,
    PrenotazioniCancellate int,
    PrenotazioniNonUtilizzate int
);



OPEN curSala;

ric: LOOP
	FETCH curSala INTO numerosala,nomecinema;
	IF finished = 1 THEN 
		LEAVE ric;
	END IF;
	insert into Result
	SELECT nomecinema,
    (SELECT numerosala),
	(select count(CodicePrenotazione) from prenotazione where cast(OrarioInizio AS date)>=datainizio and cast(OrarioInizio AS date)<=datafine and prenotazione.Utilizzato=1 and prenotazione.Posto_Sala_NumeroSala=numerosala and prenotazione.Posto_Sala_Cinema_Nome=nomecinema and prenotazione.OrarioFine is not null),
	(select count(CodicePrenotazione) from prenotazione where cast(OrarioInizio AS date)>=datainizio and cast(OrarioInizio AS date)<=datafine and prenotazione.Cancellato=1 and prenotazione.Posto_Sala_NumeroSala=numerosala and prenotazione.Posto_Sala_Cinema_Nome=nomecinema and prenotazione.OrarioFine is not null),
	(select count(CodicePrenotazione) from prenotazione where cast(OrarioInizio AS date)>=datainizio and cast(OrarioInizio AS date)<=datafine and prenotazione.Utilizzato=0 and prenotazione.Cancellato=0 and prenotazione.Posto_Sala_NumeroSala=numerosala and prenotazione.Posto_Sala_Cinema_Nome=nomecinema and prenotazione.OrarioFine is not null);
    END LOOP ric;
	CLOSE curSala;

SELECT 
    *
FROM
    Result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure IniziaPrenotazione
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `IniziaPrenotazione`(IN postoFila varchar(1) , IN postoNumero int, IN codiceProiezione int)
BEGIN
	declare numeroSala int;
    declare nomeCinema varchar(64);
    set numeroSala=( select Sala_NumeroSala from proiezione where Codice=codiceProiezione);
    set nomeCinema=( select Sala_Cinema_Nome from proiezione where Codice=codiceProiezione);
    
	IF (postoFila, postoNumero, numeroSala, nomeCinema, codiceProiezione) in (SELECT Posto_Fila, Posto_Numero, Posto_Sala_NumeroSala, Posto_Sala_Cinema_Nome, Proiezione_Codice FROM prenotazione) THEN 
    signal sqlstate '45000'
    SET MESSAGE_TEXT = 'Posto non disponibile';
    END IF;
    IF (postoFila, postoNumero, numeroSala, nomeCinema) not in(SELECT Fila, Numero, Sala_NumeroSala, Sala_Cinema_Nome FROM posto) THEN 
    signal sqlstate '45000'
    SET MESSAGE_TEXT = 'Posto inesistente';
    END IF;
	insert into prenotazione(Posto_Fila,Posto_Numero,Posto_Sala_NumeroSala,Posto_Sala_Cinema_Nome,Proiezione_Codice,OrarioInizio) values (postoFila ,postoNumero, numeroSala, nomeCinema, codiceProiezione, NOW());
	SELECT Trim(LAST_INSERT_ID()) AS "Codice prenotazione temporaneo";
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Inizializza
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Inizializza`()
BEGIN
insert into cinema(Nome) values ('Alkatraz'),('Baldo'),('Chicco'),('Dolomiti'),('Emmental'),('Figaro');
insert into sala(NumeroSala,Cinema_Nome) values (1,'Alkatraz'),(2,'Alkatraz'),(3,'Alkatraz'),(4,'Alkatraz'),(5,'Alkatraz'),(1,'Baldo'),(2,'Baldo'),(3,'Baldo'),(4,'Baldo'),(1,'Chicco'),(2,'Chicco'),(3,'Chicco'),(4,'Chicco'),(1,'Dolomiti'),(2,'Dolomiti'),(3,'Dolomiti'),(4,'Dolomiti');
insert into posto(Fila,Numero,Sala_NumeroSala,Sala_Cinema_Nome) values ('A',1,1,'Alkatraz'),('A',2,1,'Alkatraz'),('A',3,1,'Alkatraz'),('A',4,1,'Alkatraz'),('A',5,1,'Alkatraz');
insert into film(Titolo,Durata,Cast,CasaCinematografica) values ('Il Gladiatore','02:30','Russel Crow','Universal'),('Toy Story','02:10','Woody','Pixar'),('Biancaneve','01:30','I Sette Nani','Disney');
insert into proiezione(Orario,Costo,Sala_NumeroSala,Sala_Cinema_Nome,Film_Titolo) values ('2020-08-24 16:00',7,1,'Alkatraz','Il Gladiatore'),('2020-08-24 19:00',7,1,'Alkatraz','Il Gladiatore'),('2020-08-24 22:00',7,1,'Alkatraz','Il Gladiatore'),('2020-08-24 16:00',6,2,'Alkatraz','Toy Story'),('2020-08-24 19:00',6,2,'Alkatraz','Toy Story'),('2020-08-24 22:00',6,2,'Alkatraz','Toy Story'),('2020-08-24 16:00',7,3,'Alkatraz','Biancaneve'),('2020-08-24 19:00',7,3,'Alkatraz','Biancaneve'),('2020-08-25 19:00',7,1,'Alkatraz','Il Gladiatore'),('2020-08-25 22:00',7,1,'Alkatraz','Il Gladiatore'),('2020-08-25 16:00',6,2,'Alkatraz','Toy Story'),('2020-08-26 16:00',7,1,'Alkatraz','Il Gladiatore'),('2020-08-26 19:00',7,1,'Alkatraz','Il Gladiatore'),('2020-08-26 22:00',7,1,'Alkatraz','Il Gladiatore');
insert into maschera (CodiceMaschera,Nome, cinema_Nome) values (1,'Alessio', 'Alkatraz'),(2,'Biagio', 'Alkatraz'),(3,'Cesare', 'Alkatraz'),(4,'Enrico', 'Alkatraz');
insert into proiezionista (CodiceProiezionista,Nome, cinema_Nome) values (1,'Federico', 'Alkatraz'),(2,'Giorgio', 'Alkatraz'),(3,'Homer', 'Alkatraz'),(4,'Ilario', 'Alkatraz');
insert into calendario (OrarioInizio, OrarioFine) values ('2020-08-24 16:00:00', '2020-08-24 22:00:00'),('2020-08-25 16:00:00', '2020-08-25 22:00:00'),('2020-08-26 16:00:00', '2020-08-26 22:00:00'),('2020-08-27 16:00:00', '2020-08-27 22:00:00'),('2020-08-28 16:00:00', '2020-08-28 22:00:00');
insert into apertura(cinema_Nome,calendario_OrarioInizio,calendario_OrarioFine) values ('Alkatraz','2020-08-24 16:00:00', '2020-08-24 22:00:00'),('Alkatraz','2020-08-25 16:00:00', '2020-08-25 22:00:00'),('Alkatraz','2020-08-26 16:00:00', '2020-08-26 22:00:00'),('Alkatraz','2020-08-27 16:00:00', '2020-08-27 22:00:00'),('Alkatraz','2020-08-28 16:00:00', '2020-08-28 22:00:00');
insert into turmaschera(Maschera_CodiceMaschera,calendario_OrarioInizio, calendario_OrarioFine) values (1,'2020-08-24 16:00:00', '2020-08-24 22:00:00'),(1,'2020-08-25 16:00:00', '2020-08-25 22:00:00'),(1,'2020-08-26 16:00:00', '2020-08-26 22:00:00'),(1,'2020-08-27 16:00:00', '2020-08-27 22:00:00'),(2,'2020-08-26 16:00:00', '2020-08-26 22:00:00'),(2,'2020-08-27 16:00:00', '2020-08-27 22:00:00'),(2,'2020-08-28 16:00:00', '2020-08-28 22:00:00'),(3,'2020-08-24 16:00:00', '2020-08-24 22:00:00'),(3,'2020-08-25 16:00:00', '2020-08-25 22:00:00');
insert into turproiezionista(Proiezionista_CodiceProiezionista,calendario_OrarioInizio, calendario_OrarioFine) values (1,'2020-08-24 16:00:00', '2020-08-24 22:00:00'),(1,'2020-08-25 16:00:00', '2020-08-25 22:00:00'),(1,'2020-08-26 16:00:00', '2020-08-26 22:00:00'),(1,'2020-08-27 16:00:00', '2020-08-27 22:00:00'),(2,'2020-08-26 16:00:00', '2020-08-26 22:00:00'),(2,'2020-08-27 16:00:00', '2020-08-27 22:00:00'),(2,'2020-08-28 16:00:00', '2020-08-28 22:00:00'),(3,'2020-08-24 16:00:00', '2020-08-24 22:00:00'),(3,'2020-08-25 16:00:00', '2020-08-25 22:00:00'),(4,'2020-08-24 16:00:00', '2020-08-24 22:00:00');
SET GLOBAL event_scheduler = ON;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PostiLiberi
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PostiLiberi`(codiceProiezione int)
BEGIN
	SELECT Fila,Numero from posto,proiezione WHERE proiezione.Codice=codiceProiezione and  proiezione.Sala_Cinema_Nome=posto.Sala_Cinema_Nome and proiezione.Sala_NumeroSala=posto.Sala_NumeroSala and (posto.Fila, posto.Numero, posto.Sala_NumeroSala, posto.Sala_Cinema_Nome, proiezione.Codice) not in (SELECT Posto_Fila, Posto_Numero, Posto_Sala_NumeroSala, Posto_Sala_Cinema_Nome, Proiezione_Codice FROM prenotazione);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ProiezioniGiornoCinema
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ProiezioniGiornoCinema`(cinema varchar(64),giorno date)
BEGIN
	SELECT * FROM Proiezione WHERE Sala_Cinema_Nome=cinema and CAST(Orario AS date)=giorno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PuliziaPrenotazioni
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PuliziaPrenotazioni`()
BEGIN
delete from prenotazione where OrarioFine is NULL and timestampdiff(minute,OrarioInizio,now())>10;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VediAperture
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VediAperture`()
BEGIN
SELECT * FROM cinema.apertura;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VediCalendario
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VediCalendario`()
BEGIN
SELECT * FROM cinema.calendario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VediFilm
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VediFilm`()
BEGIN
SELECT * FROM cinema.film;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VediMaschere
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VediMaschere`()
BEGIN
SELECT * FROM cinema.maschera;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VediProiezioni
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VediProiezioni`()
BEGIN
	select * from proiezione;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VediProiezionisti
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VediProiezionisti`()
BEGIN
SELECT * FROM cinema.proiezionista;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VediTurnoMaschere
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VediTurnoMaschere`()
BEGIN
SELECT * FROM cinema.turmaschera;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VediTurnoProiezionisti
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VediTurnoProiezionisti`()
BEGIN
SELECT * FROM cinema.turproiezionista;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VerificaBiglietto
-- -----------------------------------------------------

DELIMITER $$
USE `cinema`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VerificaBiglietto`(codiceprenotazione int)
BEGIN
if ((select Cancellato from prenotazione where prenotazione.CodicePrenotazione=codiceprenotazione)=1) then signal sqlstate '46000' SET message_text='La Prenotazione è stata cancellata';
END IF;
if ((select Utilizzato from prenotazione where prenotazione.CodicePrenotazione=codiceprenotazione)=1) then signal sqlstate '46000' SET message_text='La Prenotazione è stata utilizzata';
END IF;
if ((select OrarioFine from prenotazione where prenotazione.CodicePrenotazione=codiceprenotazione)is NULL) then signal sqlstate '46000' SET message_text='La Prenotazione non è valida';
END IF;
update prenotazione set Utilizzato=1 where prenotazione.CodicePrenotazione=codicePrenotazione;

END$$

DELIMITER ;
USE `cinema`;

DELIMITER $$
USE `cinema`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `cinema`.`cartacredito_BEFORE_INSERT`
BEFORE INSERT ON `cinema`.`cartacredito`
FOR EACH ROW
BEGIN
	if new.Datascadenza<now() then signal sqlstate '45000' set message_text='Carta Scaduta';
    end if;
END$$


DELIMITER ;


CREATE EVENT PuliziaPrenotazioni
ON SCHEDULE EVERY 1 MINUTE
STARTS CURRENT_TIMESTAMP
DO
   call PuliziaPrenotazioni();


CREATE USER 'amministratore' IDENTIFIED BY 'amministratore';
CREATE USER 'maschera' IDENTIFIED BY 'maschera';
CREATE USER 'cliente' IDENTIFIED BY 'cliente';
GRANT EXECUTE ON PROCEDURE cinema.ProiezioniGiornoCinema TO 'cliente';


GRANT EXECUTE ON PROCEDURE cinema.PostiLiberi TO 'cliente';
GRANT EXECUTE ON PROCEDURE cinema.IniziaPrenotazione TO 'cliente';
GRANT EXECUTE ON PROCEDURE cinema.ConfermaPrenotazione TO 'cliente';
GRANT EXECUTE ON PROCEDURE cinema.CancellaPrenotazione TO 'cliente';

GRANT EXECUTE ON PROCEDURE cinema.VerificaBiglietto TO 'maschera';
GRANT ALL PRIVILEGES ON cinema.* TO 'amministratore';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
